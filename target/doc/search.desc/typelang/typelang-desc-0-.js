searchState.loadedDescShard("typelang", 0, "TypeLang (Rust) ルートモジュール\nAST モジュール\nエラー表現モジュール\n評価モジュール\n型推論モジュール\n字句解析モジュール\n構文解析モジュール\nTypeLang …\n型システム基盤モジュール\n…\n言語内の式を表す AST ノードの集合。\n…\n…\n制約と型式を組み合わせたシグマ型。\n…\n構文上の型注釈を表すバリアント集合。\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\n評価器で発生するエラー型。\n字句解析で報告されるエラー型。\n構文解析で用いるエラー型。\n型推論や型検査で利用するエラー型。\n…\n…\n…\n位置情報付きの型エラーを作成する。\n位置情報付きの評価エラーを作成する。\n…\nスニペットを添えて型エラーを作成する。\n<code>[CODE] message @line=..</code> の形式で文字列化する。\n内部の <code>ErrorInfo</code> をそのまま整形する。\n<code>ErrorInfo</code> をそのまま書式化する。\n<code>ErrorInfo</code> をそのまま書式化する。\n<code>ErrorInfo</code> をそのまま書式化する。\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\n…\n…\n…\n評価時の汎用エラーを作成する。\n…\n名前と値を紐づける評価環境。\n2 …\n評価器が返す値の列挙体。\n抽象構文木の式を評価して <code>Value</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nREPL …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\nReturns the argument unchanged.\n…\n…\n…\n標準的な型クラス階層を生成する。\n…\nCalls <code>U::from(self)</code>.\n構文木上の型式を内部の <code>Type</code> へ変換する。\n…\n字句解析で識別されるトークンの分類。\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\n…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n…\n…\n型注釈を含む単一式（<code>expr := core_expr [&#39;::&#39; type]</code>…\nソース文字列を完全に解析し、<code>Program</code> …\nプログラム全体（<code>program := { toplevel }</code>…\n制約付きシグマ型（<code>context =&gt; type</code>…\n関数矢印を含む型式を解析する。\nTypeLang REPL …\n…\nTypeLang …\n…\n型クラス名と対象型を関連付ける制約。\n制約と型本体を組み合わせた Qualified Type。\n全称型変数を束縛する型スキーム。\n置換を適用できる値が実装するトレイト。\n型適用 <code>func arg</code> を記述するノード。\n型コンストラクタ名を保持するレコード。\n…\nタプル型を構成する要素群を表すノード。\n型変数を一意に識別する ID コンテナ。\n未使用の型変数 ID …\n型システムで扱う各種型バリアント。\n…\n単一化が失敗したときの情報。\nクラスと上位クラスの関係を登録する。\nクラスに対するインスタンスを追加する。\n曖昧な数値型変数を簡易に既定化（…\n…\n型変数と型を結び付けて置換とする。\n環境を深く複製する。\n2つの置換を合成する。\n空の環境で初期化する。\n<code>new</code> と同等に初期化する。\n複数の制約が満たされるかを判定する。\n名前と型スキームを環境へ追加する。\n未使用の型変数を生成する。\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n与えられた型に現れる自由型変数 ID …\n…\n…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n名前から型スキームを検索する。\n空の環境を生成する。\nカウンタを 0 に初期化する。\n…\n制約つき型 <code>QualType</code> …\n指定した制約と型本体から <code>QualType</code> …\n<code>[]</code> …\n<code>String</code> 型（<code>[Char]</code>）を構築するヘルパー関数。\n2つの型を突き合わせて最小の置換を得る。")