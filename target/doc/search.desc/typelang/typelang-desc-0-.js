searchState.loadedDescShard("typelang", 0, "TypeLang (Rust) ルートモジュール\n抽象構文木（AST）\nエラー型の定義（共通フォーマット: [CODE] …\n評価器（evaluator）\n型推論（infer）\n字句解析（lexer）\n構文解析（parser）\nREPL（対話環境）モジュール\n型システム（typesys）\n型クラス制約を表現する構造体。\n言語の式を表す抽象構文木。\n整数リテラルの基数を識別する。\n…\n…\nトップレベル関数定義を保持する構造体。\nパーサが扱う型式のバリアント。\n人が読める形で式を整形する。\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\n評価器で生じたエラーを表すラッパー。\n字句解析時のエラーを表すラッパー。\n構文解析時のエラーを表すラッパー。\n型推論・型検査のエラーを表すラッパー。\n…\n…\n…\n位置情報付きの型エラーを生成する。\n位置情報付きの評価エラーを生成する。\n…\nスニペットを添えて型エラーを生成する。\n…\n内部のエラー情報をそのまま整形する。\n内部のエラー情報をそのまま整形する。\n内部のエラー情報をそのまま整形する。\n内部のエラー情報をそのまま整形する。\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\n…\n…\n…\n評価時の汎用エラーを生成する。\n…\n評価環境として使う名前と値のマップ。\n2 …\n評価器が扱う値のバリアント集合。\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nREPL …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\nReturns the argument unchanged.\n式の主型と制約を推論する。\n…\n…\n標準の型クラス階層を初期化する。\n初期の型環境を構築する。\nCalls <code>U::from(self)</code>.\n…\n…\n字句解析が生成するトークン種別。\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nソースコードをトークン列に分割する。\n再帰下降構文解析を行うための状態。\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nトークン列からパーサを初期化する。\n単一の式を解析する。\n型注釈を含む式を解析する。 expr := (lambda | …\n…\nトップレベル定義の列を解析する。 program …\nシグマ型（制約付き型式）を解析する。\n関数型を含む型式を解析する。\nREPL のコマンドとメインループ\nREPL/テスト共用: …\nREPLのメインループを開始する。 …\n…\n型クラスと対象型の組を表す制約。\n制約付きの型（Qualified Type）。\n全称型変数を含む型スキーム。\n型適用を表現する構造体。\n型コンストラクタの名前を表す構造体。\n関数型の引数と戻り値を保持する構造体。\n…\n型変数を一意に識別するための構造体。\n新しい型変数番号を供給する構造体。\n型システムで利用する型バリアント。\n…\n単一化が失敗したときの情報。\nクラスと上位クラスの関係を登録する。\nクラスに対するインスタンスを追加する。\n曖昧な数値型変数を簡易に既定化（…\n制約に置換を適用する。\n制約付き型に置換を適用する。\n…\n型に置換を適用する。\n型変数と型を結び付けて置換とする。\n環境を深く複製する。\n2つの置換を合成する。\n既定で空の環境を返す。\n<code>new</code> と同等に初期化する。\n複数の制約が満たされるかを判定する。\n名前と型スキームを環境へ追加する。\n未使用の型変数を生成する。\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n型に含まれる自由型変数集合を求める。\n…\n…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n名前から型スキームを検索する。\n空の環境を生成する。\nカウンタを初期化する。\n…\n制約つき型 <code>QualType</code> …\n約束された制約と型本体を組み合わせる。\nリスト型を構築する。\n<code>String</code> を内部表現で生成する。\n2つの型を突き合わせて最小の置換を得る。")