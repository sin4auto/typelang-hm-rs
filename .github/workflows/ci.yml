name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    name: Rust ${{ matrix.rust }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: ["1.70.0", "stable"]
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt
      - name: Run make check (fmt/clippy/test)
        run: make check
      - name: Build docs with rustdoc -D warnings
        run: make doc

  coverage:
    name: Coverage (llvm-cov)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      COVERAGE_MIN: "70"
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-stable-
            ${{ runner.os }}-cargo-
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov --locked --version 0.6.19
      - name: Coverage summary
        run: make coverage-summary
      - name: Generate coverage (lcov)
        run: make coverage-lcov
      - name: Generate coverage (json)
        run: make coverage-json
      - name: Compute coverage metrics and summary
        id: cov_eval
        run: |
          python3 - <<'PY'
          import json, os
          with open('coverage.json','r') as f:
              data = json.load(f)
          percent = float(data['data'][0]['totals']['lines']['percent'])
          thr = float(os.getenv('COVERAGE_MIN','65'))
          below = percent < thr
          print(f"percent={percent:.2f}")
          print(f"threshold={thr:.2f}")
          print(f"below={'true' if below else 'false'}")
          with open(os.environ['GITHUB_OUTPUT'],'a') as out:
              out.write(f"percent={percent:.2f}\n")
              out.write(f"threshold={thr:.2f}\n")
              out.write(f"below={'true' if below else 'false'}\n")
          with open(os.environ.get('GITHUB_STEP_SUMMARY',''), 'a') as s:
              s.write(f"## Coverage\nLine coverage: {percent:.2f}% (min {thr:.2f}%)\n")
          PY
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: lcov.info
          path: lcov.info
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: true
      - name: Comment coverage on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '<!-- coverage-report-comment -->';
            const pct = `${{ steps.cov_eval.outputs.percent }}`;
            const thr = `${{ steps.cov_eval.outputs.threshold }}`;
            const below = `${{ steps.cov_eval.outputs.below }}` === 'true';
            const body = [
              '### Coverage Report',
              `Line coverage: ${pct}% (min ${thr}%)`,
              below ? '❌ Below threshold.' : '✅ Meets threshold.',
              '',
              tag
            ].join('\n');
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request?.number;
            if (!pr) { core.info('No PR context'); return; }
            const list = await github.rest.issues.listComments({ owner, repo, issue_number: pr });
            const prev = list.data.find(c => c.body && c.body.includes(tag));
            if (prev) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: prev.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: pr, body });
            }
      - name: Enforce coverage threshold
        if: ${{ steps.cov_eval.outputs.below == 'true' }}
        run: |
          echo "Coverage ${{ steps.cov_eval.outputs.percent }}% is below threshold $COVERAGE_MIN%" >&2
          exit 1
